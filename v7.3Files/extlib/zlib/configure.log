--------------------
./configure
Checking for gcc...
=== ztest35.c ===
extern int getchar();
int hello() {return getchar();}
===
gcc -c ztest35.c
./configure: 182: ./configure: gcc: not found
... using cc

Checking for obsessive-compulsive compiler options...
=== ztest35.c ===
int foo() { return 0; }
===
cc -c -O ztest35.c

Checking for shared library support...
=== ztest35.c ===
extern int getchar();
int hello() {return getchar();}
===
cc -w -c -O ztest35.c
cc -shared -O -o ztest35.so ztest35.o
/usr/bin/ld: ztest35.o: relocation R_X86_64_PC32 against undefined symbol `getchar@@GLIBC_2.2.5' can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: final link failed: Bad value
clang: error: linker command failed with exit code 1 (use -v to see invocation)
(exit code 1)
No shared library support.
Building static library libz.a version 1.2.11 with cc.

=== ztest35.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
cc -c -O ztest35.c
Checking for size_t... Yes.


=== ztest35.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
cc -c -O -D_LARGEFILE64_SOURCE=1 ztest35.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest35.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
cc -O -D_LARGEFILE64_SOURCE=1 -o ztest35 ztest35.c
Checking for strerror... Yes.

=== ztest35.c ===
#include <unistd.h>
int main() { return 0; }
===
cc -c -O -D_LARGEFILE64_SOURCE=1 ztest35.c
Checking for unistd.h... Yes.

=== ztest35.c ===
#include <stdarg.h>
int main() { return 0; }
===
cc -c -O -D_LARGEFILE64_SOURCE=1 ztest35.c
Checking for stdarg.h... Yes.

=== ztest35.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
cc -c -O -D_LARGEFILE64_SOURCE=1 ztest35.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest35.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
cc -O -D_LARGEFILE64_SOURCE=1 -o ztest35 ztest35.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest35.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
cc -c -O -D_LARGEFILE64_SOURCE=1 ztest35.c
Checking for return value of vsnprintf()... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = cc
CFLAGS = -O -D_LARGEFILE64_SOURCE=1
CPP = cc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = cc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O -D_LARGEFILE64_SOURCE=1
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Linux 4.4.0-43-Microsoft
--------------------


